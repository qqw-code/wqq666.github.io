题目：
给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。
重复出现的子串要计算它们出现的次数。

示例：
输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。

代码：
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int countBinarySubstrings(char * s)
{
    int i;
    int len;
    int count = 0;
    int curr = 1;
    int pre = 0;

    len = strlen(s);
    if (len <= 1) {
        return 0;
    }

    for (i = 0; i < len-1; i++) {
        if (s[i] == s[i+1]) {
            curr++;
        } 
		else {
            pre = curr;
            curr = 1;
        }
 
        if (pre >= curr) {
            count++;
        }
    }
    return count;
}
int main()
{
	int i,length;
	printf("please input length:\n");
	scanf("%d",&length);
	
	char* str=(char*)malloc(sizeof(char)*length);
	printf("please input a string:\n");
	scanf("%s",str);
	
	printf("%d\n",countBinarySubstrings(str));
	return 0;
}
